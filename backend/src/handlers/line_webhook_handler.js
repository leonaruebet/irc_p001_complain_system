/**
 * LINE Webhook Handler
 * Processes incoming LINE webhook events and manages bot interactions
 */

const lineService = require('../services/line_service');

class LineWebhookHandler {
  constructor() {
    console.log('üéØ LineWebhookHandler initialized');
  }

  /**
   * Processes LINE webhook events
   * @param {Array} events - Array of LINE webhook events
   * @returns {Promise<void>}
   */
  async handle_webhook_events(events) {
    console.log(`üì® Processing ${events.length} LINE webhook event(s)`);
    
    try {
      const promises = events.map(event => this.handle_single_event(event));
      await Promise.all(promises);
      console.log('‚úÖ All LINE webhook events processed successfully');
    } catch (error) {
      console.error('‚ùå Error processing LINE webhook events:', error);
      throw error;
    }
  }

  /**
   * Handles a single LINE webhook event
   * @param {Object} event - LINE webhook event
   * @returns {Promise<void>}
   */
  async handle_single_event(event) {
    console.log(`üîÑ Processing event type: ${event.type}`);
    
    try {
      switch (event.type) {
        case 'message':
          await this.handle_message_event(event);
          break;
        
        case 'follow':
          await this.handle_follow_event(event);
          break;
        
        case 'unfollow':
          await this.handle_unfollow_event(event);
          break;
        
        case 'postback':
          await this.handle_postback_event(event);
          break;
        
        default:
          console.log(`‚ö†Ô∏è Unhandled event type: ${event.type}`);
      }
    } catch (error) {
      console.error(`‚ùå Error handling event ${event.type}:`, error);
      throw error;
    }
  }

  /**
   * Handles incoming message events
   * @param {Object} event - LINE message event
   * @returns {Promise<void>}
   */
  async handle_message_event(event) {
    const { replyToken, source, message } = event;
    const userId = source.userId;
    
    console.log(`üí¨ Message from user ${userId}: ${message.text || 'Non-text message'}`);
    
    try {
      if (message.type === 'text') {
        await this.process_text_message(replyToken, userId, message.text);
      } else {
        await this.handle_non_text_message(replyToken, userId, message);
      }
    } catch (error) {
      console.error('‚ùå Error handling message event:', error);
      await this.send_error_message(replyToken);
    }
  }

  /**
   * Processes text messages and determines appropriate response
   * @param {string} replyToken - Reply token for response
   * @param {string} userId - LINE user ID
   * @param {string} text - Message text content
   * @returns {Promise<void>}
   */
  async process_text_message(replyToken, userId, text) {
    const normalizedText = text.toLowerCase().trim();
    
    console.log(`üîç Processing text: "${normalizedText}"`);
    
    // Command routing based on text content
    if (normalizedText.includes('‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ') || normalizedText.includes('hello') || normalizedText === 'hi') {
      await this.send_welcome_message(replyToken, userId);
    } 
    else if (normalizedText.includes('‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô') || normalizedText.includes('complaint') || normalizedText.startsWith('/complain')) {
      await this.start_complaint_process(replyToken, userId);
    }
    else if (normalizedText.includes('‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞') || normalizedText.includes('status')) {
      await this.check_complaint_status(replyToken, userId);
    }
    else if (normalizedText.includes('‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠') || normalizedText.includes('help')) {
      await this.send_help_message(replyToken);
    }
    else {
      await this.send_default_response(replyToken, text);
    }
  }

  /**
   * Sends welcome message to new or returning users
   * @param {string} replyToken - Reply token
   * @param {string} userId - LINE user ID
   * @returns {Promise<void>}
   */
  async send_welcome_message(replyToken, userId) {
    console.log(`üëã Sending welcome message to user: ${userId}`);
    
    try {
      // Get user profile for personalization
      const profile = await lineService.get_user_profile(userId);
      const displayName = profile.displayName || '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ';

      const welcomeMessage = `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏∞ ‡∏Ñ‡∏∏‡∏ì${displayName} üëã

‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô IRC Complaint System

‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÑ‡∏î‡πâ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:
üî∏ ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
üî∏ ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
üî∏ ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥

‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏™‡∏á‡∏™‡∏±‡∏¢‡πÉ‡∏î‡πÜ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏™‡∏°‡∏≠‡∏Ñ‡πà‡∏∞ üòä`;

      await lineService.reply_message(replyToken, welcomeMessage);
    } catch (error) {
      console.error('‚ùå Error sending welcome message:', error);
      await this.send_error_message(replyToken);
    }
  }

  /**
   * Starts the complaint submission process
   * @param {string} replyToken - Reply token
   * @param {string} userId - LINE user ID
   * @returns {Promise<void>}
   */
  async start_complaint_process(replyToken, userId) {
    console.log(`üìù Starting complaint process for user: ${userId}`);
    
    // Test message to verify bot is working
    const testMessage = "‡∏Ñ‡∏ß‡∏¢‡πÑ‡∏£‡∏™‡∏±‡∏™";
    
    try {
      await lineService.reply_message(replyToken, testMessage);
      console.log('‚úÖ Test complaint message sent successfully');
    } catch (error) {
      console.error('‚ùå Error sending test complaint message:', error);
      
      // Fallback: send quick reply as usual
      const quickReplyActions = [
        {
          type: 'message',
          label: '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏î‡∏µ',
          text: '‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÑ‡∏°‡πà‡∏î‡∏µ'
        },
        {
          type: 'message', 
          label: '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢',
          text: '‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢'
        },
        {
          type: 'message',
          label: '‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÜ',
          text: '‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ‡∏≠‡∏∑‡πà‡∏ô‡πÜ'
        }
      ];

      const message = lineService.create_quick_reply(
        '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô',
        quickReplyActions
      );

      await lineService.reply_message(replyToken, message);
    }
  }

  /**
   * Checks complaint status for user
   * @param {string} replyToken - Reply token
   * @param {string} userId - LINE user ID
   * @returns {Promise<void>}
   */
  async check_complaint_status(replyToken, userId) {
    console.log(`üìä Checking complaint status for user: ${userId}`);
    
    // TODO: Integrate with complaint database to fetch actual status
    const statusMessage = `‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:

üîç ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô"

‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏ô‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢
‡πÄ‡∏ä‡πà‡∏ô: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ C001"`;

    await lineService.reply_message(replyToken, statusMessage);
  }

  /**
   * Sends help message with available commands
   * @param {string} replyToken - Reply token
   * @returns {Promise<void>}
   */
  async send_help_message(replyToken) {
    console.log('‚ùì Sending help message');
    
    const helpMessage = `üìö ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô

‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:

üî∏ "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ" ‡∏´‡∏£‡∏∑‡∏≠ "hello" - ‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢
üî∏ "‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô" ‡∏´‡∏£‡∏∑‡∏≠ "complaint" - ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
üî∏ "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞" ‡∏´‡∏£‡∏∑‡∏≠ "status" - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
üî∏ "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠" ‡∏´‡∏£‡∏∑‡∏≠ "help" - ‡∏î‡∏π‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥

üí° ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö: ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÑ‡∏î‡πâ

‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô`;

    await lineService.reply_message(replyToken, helpMessage);
  }

  /**
   * Sends default response for unrecognized messages
   * @param {string} replyToken - Reply token
   * @param {string} originalText - Original message text
   * @returns {Promise<void>}
   */
  async send_default_response(replyToken, originalText) {
    console.log(`ü§î Sending default response for: "${originalText}"`);
    
    const defaultMessage = `‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡πà‡∏á‡∏°‡∏≤ üòÖ

‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¥‡∏°‡∏û‡πå:
‚Ä¢ "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
‚Ä¢ "‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
‚Ä¢ "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞

‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏∞`;

    await lineService.reply_message(replyToken, defaultMessage);
  }

  /**
   * Handles non-text messages (images, stickers, etc.)
   * @param {string} replyToken - Reply token
   * @param {string} userId - LINE user ID
   * @param {Object} message - LINE message object
   * @returns {Promise<void>}
   */
  async handle_non_text_message(replyToken, userId, message) {
    console.log(`üìé Handling non-text message type: ${message.type}`);
    
    const responseMessage = `‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö ${message.type} ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞ üìé

‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô" 
‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡πà‡∏∞`;

    await lineService.reply_message(replyToken, responseMessage);
  }

  /**
   * Handles follow events (user adds bot as friend)
   * @param {Object} event - LINE follow event
   * @returns {Promise<void>}
   */
  async handle_follow_event(event) {
    const { replyToken, source } = event;
    const userId = source.userId;
    
    console.log(`‚ûï User followed: ${userId}`);
    
    try {
      await this.send_welcome_message(replyToken, userId);
    } catch (error) {
      console.error('‚ùå Error handling follow event:', error);
    }
  }

  /**
   * Handles unfollow events (user removes bot)
   * @param {Object} event - LINE unfollow event
   * @returns {Promise<void>}
   */
  async handle_unfollow_event(event) {
    const { source } = event;
    const userId = source.userId;
    
    console.log(`‚ûñ User unfollowed: ${userId}`);
    // Note: Cannot send messages to users who unfollowed
    // This is mainly for logging and cleanup purposes
  }

  /**
   * Handles postback events (button clicks, quick replies)
   * @param {Object} event - LINE postback event
   * @returns {Promise<void>}
   */
  async handle_postback_event(event) {
    const { replyToken, postback, source } = event;
    const userId = source.userId;
    
    console.log(`üîò Postback from user ${userId}: ${postback.data}`);
    
    try {
      // Handle postback data
      const data = postback.data;
      
      if (data.startsWith('complaint_')) {
        await this.handle_complaint_postback(replyToken, userId, data);
      } else {
        await this.send_default_response(replyToken, data);
      }
    } catch (error) {
      console.error('‚ùå Error handling postback event:', error);
      await this.send_error_message(replyToken);
    }
  }

  /**
   * Handles complaint-related postback actions
   * @param {string} replyToken - Reply token
   * @param {string} userId - LINE user ID
   * @param {string} data - Postback data
   * @returns {Promise<void>}
   */
  async handle_complaint_postback(replyToken, userId, data) {
    console.log(`üìã Handling complaint postback: ${data}`);
    
    const message = '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô';
    await lineService.reply_message(replyToken, message);
  }

  /**
   * Sends generic error message
   * @param {string} replyToken - Reply token
   * @returns {Promise<void>}
   */
  async send_error_message(replyToken) {
    const errorMessage = `‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß üòî

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà 
‡∏´‡∏≤‡∏Å‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡∏Ñ‡πà‡∏∞`;

    try {
      await lineService.reply_message(replyToken, errorMessage);
    } catch (error) {
      console.error('‚ùå Failed to send error message:', error);
    }
  }
}

module.exports = new LineWebhookHandler();