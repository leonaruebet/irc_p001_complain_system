/**
 * LINE Webhook Handler
 * Processes incoming LINE webhook events and manages bot interactions
 */

const lineService = require('../services/line_service');
const { Employee, ComplaintSession, LineEventsRaw } = require('../models');

class LineWebhookHandler {
  constructor() {
    this.activeComplaintSessions = new Map(); // userId -> timeout
    console.log('üéØ LineWebhookHandler initialized with database integration');
  }

  /**
   * Processes LINE webhook events
   * @param {Array} events - Array of LINE webhook events
   * @returns {Promise<void>}
   */
  async handle_webhook_events(events) {
    console.log(`üì® Processing ${events.length} LINE webhook event(s)`);
    
    try {
      const promises = events.map(event => this.handle_single_event(event));
      await Promise.all(promises);
      console.log('‚úÖ All LINE webhook events processed successfully');
    } catch (error) {
      console.error('‚ùå Error processing LINE webhook events:', error);
      throw error;
    }
  }

  /**
   * Handles a single LINE webhook event
   * @param {Object} event - LINE webhook event
   * @returns {Promise<void>}
   */
  async handle_single_event(event) {
    console.log(`üîÑ Processing event type: ${event.type}`);
    
    try {
      // Save raw event to database for audit
      await this.save_raw_event(event);
    } catch (rawEventError) {
      console.error(`‚ùå RAW EVENT SAVE FAILED:`, rawEventError);
    }
    
    try {
      switch (event.type) {
        case 'message':
          await this.handle_message_event(event);
          break;
        
        case 'follow':
          await this.handle_follow_event(event);
          break;
        
        case 'unfollow':
          await this.handle_unfollow_event(event);
          break;
        
        case 'postback':
          await this.handle_postback_event(event);
          break;
        
        default:
          console.log(`‚ö†Ô∏è Unhandled event type: ${event.type}`);
      }
    } catch (error) {
      console.error(`‚ùå Error handling event ${event.type}:`, error);
      throw error;
    }
  }

  /**
   * Handles incoming message events
   * @param {Object} event - LINE message event
   * @returns {Promise<void>}
   */
  async handle_message_event(event) {
    const { replyToken, source, message, timestamp } = event;
    const userId = source.userId;
    
    console.log(`üí¨ Message from user ${userId}: ${message.text || 'Non-text message'}`);
    
    try {
      // Ensure user is registered in employee database
      await this.register_user_if_new(userId);
      
      if (message.type === 'text') {
        await this.process_text_message(replyToken, userId, message.text, timestamp);
      } else {
        await this.handle_non_text_message(replyToken, userId, message, timestamp);
      }
    } catch (error) {
      console.error('‚ùå Error handling message event:', error);
      await this.send_error_message(replyToken);
    }
  }

  /**
   * Processes text messages and determines appropriate response
   * @param {string} replyToken - Reply token for response
   * @param {string} userId - LINE user ID
   * @param {string} text - Message text content
   * @returns {Promise<void>}
   */
  async process_text_message(replyToken, userId, text, timestamp) {
    const normalizedText = text.toLowerCase().trim();
    
    console.log(`üîç Processing text: "${normalizedText}"`);
    
    // Check if user has active complaint session
    const activeSession = await ComplaintSession.findActiveSession(userId);
    
    // Command routing based on text content
    if (normalizedText.startsWith('/complain')) {
      await this.start_complaint_session(replyToken, userId, timestamp);
    }
    else if (normalizedText.startsWith('/submit')) {
      await this.submit_complaint_session(replyToken, userId, timestamp);
    }
    else if (activeSession) {
      // User has active complaint session - capture all messages
      await this.add_message_to_session(activeSession, 'user', 'text', text, timestamp);
      await this.acknowledge_complaint_message(replyToken);
    }
    else if (normalizedText.includes('‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ') || normalizedText.includes('hello') || normalizedText === 'hi') {
      await this.send_welcome_message(replyToken, userId);
    } 
    else if (normalizedText.includes('‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô') || normalizedText.includes('complaint')) {
      await this.start_complaint_session(replyToken, userId, timestamp);
    }
    else if (normalizedText.includes('‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞') || normalizedText.includes('status')) {
      await this.check_complaint_status(replyToken, userId);
    }
    else if (normalizedText.includes('‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠') || normalizedText.includes('help')) {
      await this.send_help_message(replyToken);
    }
    else {
      await this.send_default_response(replyToken, text);
    }
  }

  /**
   * Sends welcome message to new or returning users
   * @param {string} replyToken - Reply token
   * @param {string} userId - LINE user ID
   * @returns {Promise<void>}
   */
  async send_welcome_message(replyToken, userId) {
    console.log(`üëã Sending welcome message to user: ${userId}`);
    
    try {
      // Get user profile for personalization
      const profile = await lineService.get_user_profile(userId);
      const displayName = profile.displayName || '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ';

      const welcomeMessage = `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏∞ ‡∏Ñ‡∏∏‡∏ì${displayName} üëã

‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô IRC Complaint System

‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÑ‡∏î‡πâ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:
üî∏ ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
üî∏ ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
üî∏ ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥

‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏™‡∏á‡∏™‡∏±‡∏¢‡πÉ‡∏î‡πÜ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏™‡∏°‡∏≠‡∏Ñ‡πà‡∏∞ üòä`;

      await lineService.reply_message(replyToken, welcomeMessage);
    } catch (error) {
      console.error('‚ùå Error sending welcome message:', error);
      await this.send_error_message(replyToken);
    }
  }

  /**
   * Saves raw LINE event to database for audit
   * @param {Object} event - LINE webhook event
   * @returns {Promise<void>}
   */
  async save_raw_event(event) {
    try {
      if (!event || !event.type) {
        console.error('‚ùå Invalid event data for raw event logging:', event);
        return;
      }
      
      const eventId = `evt_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      const userId = event.source ? event.source.userId : null;
      
      await LineEventsRaw.create({
        _id: eventId,
        received_at: new Date(),
        user_id: userId,
        event_type: event.type,
        payload: event
      });
      console.log(`‚úÖ Raw event saved: ${event.type} (${eventId})`);
    } catch (error) {
      console.error('‚ùå Error saving raw event:', error);
    }
  }

  /**
   * Registers new user to employees collection
   * @param {string} userId - LINE user ID
   * @returns {Promise<void>}
   */
  async register_user_if_new(userId) {
    try {
      const existingEmployee = await Employee.findById(userId);
      
      if (!existingEmployee) {
        console.log(`üë§ Registering new user: ${userId}`);
        
        // Get user profile from LINE
        const profile = await lineService.get_user_profile(userId);
        
        await Employee.createOrUpdate(userId, {
          display_name: profile.displayName || 'Unknown User',
          department: null // Will be set later by HR
        });
        
        console.log(`‚úÖ User ${userId} registered as new employee`);
      }
    } catch (error) {
      console.error('‚ùå Error registering new user:', error);
    }
  }

  /**
   * Starts a new complaint session
   * @param {string} replyToken - Reply token
   * @param {string} userId - LINE user ID
   * @param {number} timestamp - Event timestamp
   * @returns {Promise<void>}
   */
  async start_complaint_session(replyToken, userId, timestamp) {
    console.log(`üìù Starting complaint session for user: ${userId}`);
    
    try {
      // Check if user already has active session
      const existingSession = await ComplaintSession.findActiveSession(userId);
      
      if (existingSession) {
        const message = `‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô (${existingSession.complaint_id})
        
‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå "/submit" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ô‡∏µ‡πâ

‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô`;
        
        await lineService.reply_message(replyToken, message);
        return;
      }

      // Get employee data for department mapping
      const employee = await Employee.findById(userId);
      const department = employee ? employee.department : null;
      
      // Create new complaint session
      const session = await ComplaintSession.createNewSession(userId, department);
      
      // Add initial command to chat log
      await session.addChatLog('user', 'command', '/complain');
      
      // Set up 10-minute timeout
      this.setup_session_timeout(userId);
      
      const startMessage = `‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß
‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ${session.complaint_id}

üó®Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
üìù ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á
üì§ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏û‡∏¥‡∏°‡∏û‡πå "/submit" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô

‚è∞ ‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 10 ‡∏ô‡∏≤‡∏ó‡∏µ ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö`;

      await lineService.reply_message(replyToken, startMessage);
      
      // Add bot response to chat log
      await session.addChatLog('bot', 'text', startMessage);
      
      console.log(`‚úÖ Complaint session created: ${session.complaint_id}`);
      
    } catch (error) {
      console.error('‚ùå Error starting complaint session:', error);
      await this.send_error_message(replyToken);
    }
  }

  /**
   * Submits active complaint session
   * @param {string} replyToken - Reply token
   * @param {string} userId - LINE user ID
   * @param {number} timestamp - Event timestamp
   * @returns {Promise<void>}
   */
  async submit_complaint_session(replyToken, userId, timestamp) {
    console.log(`üì§ Submitting complaint session for user: ${userId}`);
    
    try {
      const activeSession = await ComplaintSession.findActiveSession(userId);
      
      if (!activeSession) {
        const message = `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£

‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå "/complain"`;
        
        await lineService.reply_message(replyToken, message);
        return;
      }

      // Add submit command to chat log
      await activeSession.addChatLog('user', 'command', '/submit');
      
      // Submit the session
      await activeSession.submit();
      
      // Clear timeout
      this.clear_session_timeout(userId);
      
      const submitMessage = `‚úÖ ‡∏™‡πà‡∏á‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß
‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ${activeSession.complaint_id}

üìã ‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 24-48 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ${activeSession.complaint_id}"

‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡∏ó‡∏£‡∏≤‡∏ö üôè`;

      await lineService.reply_message(replyToken, submitMessage);
      
      // Add bot response to chat log
      await activeSession.addChatLog('bot', 'text', submitMessage);
      
      console.log(`‚úÖ Complaint submitted: ${activeSession.complaint_id}`);
      
    } catch (error) {
      console.error('‚ùå Error submitting complaint:', error);
      await this.send_error_message(replyToken);
    }
  }

  /**
   * Adds message to active complaint session
   * @param {Object} session - Active complaint session
   * @param {string} direction - 'user' or 'bot'
   * @param {string} messageType - Type of message
   * @param {string} message - Message content
   * @param {number} timestamp - Message timestamp
   * @returns {Promise<void>}
   */
  async add_message_to_session(session, direction, messageType, message, timestamp) {
    try {
      await session.addChatLog(direction, messageType, message);
      
      // Reset timeout on user activity
      if (direction === 'user') {
        this.setup_session_timeout(session.user_id);
      }
      
      console.log(`üí¨ Message added to session ${session.complaint_id}`);
    } catch (error) {
      console.error('‚ùå Error adding message to session:', error);
    }
  }

  /**
   * Acknowledges complaint message during active session
   * @param {string} replyToken - Reply token
   * @returns {Promise<void>}
   */
  async acknowledge_complaint_message(replyToken) {
    const acknowledgments = [
      'üìù ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå "/submit" ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô',
      '‚úÖ ‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏≤‡∏ö ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏î‡πâ',
      'üìã ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå "/submit" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô'
    ];
    
    const randomAck = acknowledgments[Math.floor(Math.random() * acknowledgments.length)];
    await lineService.reply_message(replyToken, randomAck);
  }

  /**
   * Sets up 10-minute timeout for complaint session
   * @param {string} userId - LINE user ID
   */
  setup_session_timeout(userId) {
    // Clear existing timeout
    this.clear_session_timeout(userId);
    
    // Set new timeout
    const timeout = setTimeout(async () => {
      await this.handle_session_timeout(userId);
    }, 10 * 60 * 1000); // 10 minutes
    
    this.activeComplaintSessions.set(userId, timeout);
    console.log(`‚è∞ Session timeout set for user: ${userId}`);
  }

  /**
   * Clears session timeout
   * @param {string} userId - LINE user ID
   */
  clear_session_timeout(userId) {
    const timeout = this.activeComplaintSessions.get(userId);
    if (timeout) {
      clearTimeout(timeout);
      this.activeComplaintSessions.delete(userId);
      console.log(`‚è∞ Session timeout cleared for user: ${userId}`);
    }
  }

  /**
   * Handles session timeout (auto-submit after 10 minutes)
   * @param {string} userId - LINE user ID
   */
  async handle_session_timeout(userId) {
    console.log(`‚è∞ Session timeout for user: ${userId}`);
    
    try {
      const activeSession = await ComplaintSession.findActiveSession(userId);
      
      if (activeSession && activeSession.chat_logs.length > 1) {
        // Auto-submit if user provided content
        await activeSession.addChatLog('system', 'timeout', 'Session auto-submitted due to 10-minute timeout');
        await activeSession.submit();
        
        // Notify user via push message
        const timeoutMessage = `‚è∞ ‡∏Å‡∏≤‡∏£‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô: ${activeSession.complaint_id}

‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏ï‡πà‡∏≠‡πÑ‡∏õ üìã`;

        await lineService.push_message(userId, timeoutMessage);
        
        console.log(`‚úÖ Session auto-submitted: ${activeSession.complaint_id}`);
      } else if (activeSession) {
        // Cancel empty session
        await activeSession.cancel();
        console.log(`‚ùå Empty session cancelled: ${activeSession.complaint_id}`);
      }
      
      this.clear_session_timeout(userId);
      
    } catch (error) {
      console.error('‚ùå Error handling session timeout:', error);
    }
  }

  /**
   * Checks complaint status for user
   * @param {string} replyToken - Reply token
   * @param {string} userId - LINE user ID
   * @returns {Promise<void>}
   */
  async check_complaint_status(replyToken, userId) {
    console.log(`üìä Checking complaint status for user: ${userId}`);
    
    // TODO: Integrate with complaint database to fetch actual status
    const statusMessage = `‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:

üîç ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô"

‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏£‡∏´‡∏±‡∏™‡∏Å‡∏≤‡∏£‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏ô‡∏ö‡∏£‡∏´‡∏±‡∏™‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢
‡πÄ‡∏ä‡πà‡∏ô: "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ C001"`;

    await lineService.reply_message(replyToken, statusMessage);
  }

  /**
   * Sends help message with available commands
   * @param {string} replyToken - Reply token
   * @returns {Promise<void>}
   */
  async send_help_message(replyToken) {
    console.log('‚ùì Sending help message');
    
    const helpMessage = `üìö ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô

‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:

üî∏ "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ" ‡∏´‡∏£‡∏∑‡∏≠ "hello" - ‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢
üî∏ "‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô" ‡∏´‡∏£‡∏∑‡∏≠ "complaint" - ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
üî∏ "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞" ‡∏´‡∏£‡∏∑‡∏≠ "status" - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
üî∏ "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠" ‡∏´‡∏£‡∏∑‡∏≠ "help" - ‡∏î‡∏π‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥

üí° ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö: ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÑ‡∏î‡πâ

‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô`;

    await lineService.reply_message(replyToken, helpMessage);
  }

  /**
   * Sends default response for unrecognized messages
   * @param {string} replyToken - Reply token
   * @param {string} originalText - Original message text
   * @returns {Promise<void>}
   */
  async send_default_response(replyToken, originalText) {
    console.log(`ü§î Sending default response for: "${originalText}"`);
    
    const defaultMessage = `‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡πà‡∏á‡∏°‡∏≤ üòÖ

‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¥‡∏°‡∏û‡πå:
‚Ä¢ "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
‚Ä¢ "‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
‚Ä¢ "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞

‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏∞`;

    await lineService.reply_message(replyToken, defaultMessage);
  }

  /**
   * Handles non-text messages (images, stickers, etc.)
   * @param {string} replyToken - Reply token
   * @param {string} userId - LINE user ID
   * @param {Object} message - LINE message object
   * @returns {Promise<void>}
   */
  async handle_non_text_message(replyToken, userId, message, timestamp) {
    console.log(`üìé Handling non-text message type: ${message.type}`);
    
    // Check if user has active complaint session
    const activeSession = await ComplaintSession.findActiveSession(userId);
    
    if (activeSession) {
      // Add non-text message to active session
      const messageContent = `[${message.type.toUpperCase()}] ${message.id || 'media content'}`;
      await this.add_message_to_session(activeSession, 'user', message.type, messageContent, timestamp);
      
      const responseMessage = `üìé ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö${message.type}‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß
      
‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå "/submit" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô`;
      
      await lineService.reply_message(replyToken, responseMessage);
      
      // Add bot response to session
      await activeSession.addChatLog('bot', 'text', responseMessage);
      
    } else {
      const responseMessage = `‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö ${message.type} ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞ üìé

‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå "/complain" 
‡∏´‡∏£‡∏∑‡∏≠ "‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô`;

      await lineService.reply_message(replyToken, responseMessage);
    }
  }

  /**
   * Handles follow events (user adds bot as friend)
   * @param {Object} event - LINE follow event
   * @returns {Promise<void>}
   */
  async handle_follow_event(event) {
    const { replyToken, source } = event;
    const userId = source.userId;
    
    console.log(`‚ûï User followed: ${userId}`);
    
    try {
      // Register new user automatically when they follow
      await this.register_user_if_new(userId);
      
      // Send welcome message
      await this.send_welcome_message(replyToken, userId);
      
      console.log(`‚úÖ New follower registered and welcomed: ${userId}`);
    } catch (error) {
      console.error('‚ùå Error handling follow event:', error);
    }
  }

  /**
   * Handles unfollow events (user removes bot)
   * @param {Object} event - LINE unfollow event
   * @returns {Promise<void>}
   */
  async handle_unfollow_event(event) {
    const { source } = event;
    const userId = source.userId;
    
    console.log(`‚ûñ User unfollowed: ${userId}`);
    // Note: Cannot send messages to users who unfollowed
    // This is mainly for logging and cleanup purposes
  }

  /**
   * Handles postback events (button clicks, quick replies)
   * @param {Object} event - LINE postback event
   * @returns {Promise<void>}
   */
  async handle_postback_event(event) {
    const { replyToken, postback, source } = event;
    const userId = source.userId;
    
    console.log(`üîò Postback from user ${userId}: ${postback.data}`);
    
    try {
      // Handle postback data
      const data = postback.data;
      
      if (data.startsWith('complaint_')) {
        await this.handle_complaint_postback(replyToken, userId, data);
      } else {
        await this.send_default_response(replyToken, data);
      }
    } catch (error) {
      console.error('‚ùå Error handling postback event:', error);
      await this.send_error_message(replyToken);
    }
  }

  /**
   * Handles complaint-related postback actions
   * @param {string} replyToken - Reply token
   * @param {string} userId - LINE user ID
   * @param {string} data - Postback data
   * @returns {Promise<void>}
   */
  async handle_complaint_postback(replyToken, userId, data) {
    console.log(`üìã Handling complaint postback: ${data}`);
    
    const message = '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô';
    await lineService.reply_message(replyToken, message);
  }

  /**
   * Sends generic error message
   * @param {string} replyToken - Reply token
   * @returns {Promise<void>}
   */
  async send_error_message(replyToken) {
    const errorMessage = `‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡πà‡∏∞ ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß üòî

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà 
‡∏´‡∏≤‡∏Å‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡∏Ñ‡πà‡∏∞`;

    try {
      await lineService.reply_message(replyToken, errorMessage);
    } catch (error) {
      console.error('‚ùå Failed to send error message:', error);
    }
  }
}

module.exports = new LineWebhookHandler();